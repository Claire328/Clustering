#manage packages
if("pacman" %in% rownames(installed.packages()) == FALSE) {install.packages("pacman")} 
pacman::p_load("caret","ROCR","lift","randomForest","readxl","dplyr","tidyverse","plyr","rfm","data.table","factoextra") 

df<-read_excel("...")
summary(df)

#Data preparation ---------------------------------------------

#change selected columns to facotrs
change_to_factor<-function(df,list){
  for (i in list){
    column=which(names(df)==i)
    df[,column]=lapply( df[,column],factor)
  }
  return(df)
}
list<-c('InvoiceNo','StockCode','Description','Country','CustomerID')
df<-change_to_factor(df,list)

#add a return dummy variable 
df$return<-ifelse(df$Quantity<0,1,0) 

#remove NA 
df1<-df[(is.na(df$CustomerID)==FALSE), ] #406829 
df1$total_amount<-df1$Quantity*df1$UnitPrice
df1$InvoiceDate<-as.Date(df1$InvoiceDate,'%m/%d/%Y %H:%M',tz='UTC')
analysis_date <- lubridate::as_date('2011-12-09', tz = 'UTC')

#RFM Score----------------------------------------------------------------------------------------
rfm_result <- rfm_table_order(df1, CustomerID, InvoiceDate, total_amount, analysis_date)
summary(rfm_result) #4372 unique id 

#Visualization of RFM
rfm_heatmap(rfm_result)
rfm_histograms(rfm_result)

#scatter plot
rfm_rm_plot(rfm_result)
rfm_fm_plot(rfm_result)
rfm_rf_plot(rfm_result)

#data frame
rfm_df<-data.frame(print(rfm_result))#4372
setnames(rfm_df, old=c("recency_days","transaction_count","amount"), new=c("Recency","Frequency","Monetary"))

#RFM EDA----------------------------------------
#unique customer 4372

#ourlier and skewness
hist(rfm_df$Recency)
hist(rfm_df$Frequency)
hist(rfm_df$Monetary)

#4372-->4317, 55 0 monetary customers are removed
rfm_df<-subset(rfm_df, rfm_df$Monetary>0)  

#log transformation
rfm_df$Frequency_log<- log(rfm_df$Frequency)
hist(rfm_df$Frequency_log)

rfm_df$Monetary_log<- log(rfm_df$Monetary)
hist(rfm_df$Monetary_log)

#scale data----------------------------------------------------------------

pre = preProcess(rfm_df, method="range")
dat.scaled = predict(pre, rfm_df, method=c("range"))

#elbow method-find optimal k------------------------------------------------
set.seed(123)
fviz_nbclust(dat.scaled [,c("Recency","Frequency_log","Monetary_log")],FUNcluster=hcut, method = "silhouette", k.max=12)
fviz_nbclust(dat.scaled [,c("Recency","Frequency_log","Monetary_log")],FUNcluster=hcut, method = "wss", k.max=12)
#the best k is 4

#hierarchical clustering----------------------------------------------------------

d<-dist(dat.scaled[,c("Recency","Frequency_log","Monetary_log")],method = 'euclidean')

hclust_avg<- hclust(d,method='average')
plot(hclust_avg)
hclust_com<- hclust(d,method='complete')
plot(hclust_com)
hclust_ward<- hclust(d,method='ward.D2')
plot(hclust_ward)
hclust_single<-hclust(d,method='single')
plot(hclust_single)

#cut tree
dat.scaled$cluster = cutree(hclust_ward, 4)
rfm_df$cluster=cutree(hclust_ward, 4)

#cluster stats
hc_stats <- cluster.stats(d, dat.scaled$cluster)

# (HCLUST) within clusters sum of squares
hc_stats$within.cluster.ss

# (HCLUST) cluster average silhouette widths
hc_stats$clus.avg.silwidths

#Cluster EDA---------------------------------------------------------------------------------------
#install.packages("dendroextras")

#visulization of 4 cluster in dendogram 
library(dendroextras)
c4=colour_clusters(hclust_ward,4,groupLabels=TRUE)
plot(c4)

#count of each cluster 
table(dat.scaled$cluster)

cluster_mean<-aggregate(rfm_df[-1], by=list(dat.scaled$cluster), mean) ##non scaled data
 
# cluster_max<-aggregate(rfm_df[-1], by=list(dat.scaled$cluster), max)
# cluster_min<-aggregate(rfm_df[-1], by=list(dat.scaled$cluster), min)

#visulization of each cluster 
library(knitr)
require(reshape2)

#unscaled data cluster bar chart
df3<<-cbind(cluster_mean[1],cluster_mean[,c("Recency","Frequency","Monetary")],cluster_mean[12])

dsClusters1 = melt(data.frame(df3), id=c('Group.1','cluster'))

ggplot(dsClusters1, aes(factor(cluster), value, fill=variable)) + geom_bar(stat='identity', position='dodge') +
  xlab("Cluster") + ylab('Values')+ggtitle("Average value of each cluster group")

